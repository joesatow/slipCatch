AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'This application scans specified Twitter users for sports betting tickets.  If
  it meets my criteria, it sends me an SMS.

  '
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Sports Betting Ticket Scanner
    Description: This application scans specified Twitter users for sports betting
      tickets.  If it meets my criteria, it sends me an SMS.
    Author: Joe Satow
Parameters:
  APIkey:
    Type: String
    Default: APIkey
    Description: (Required) Twitter API bearer token
    AllowedPattern: ^[A-Za-z0-9%]+$
    ConstraintDescription: Required parameter.
Globals:
  Function:
    Timeout: 10
Resources:
  SlipCatchBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: slipcatch
  SlipCatchPhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: slipcatchphotos
  SlipCatchErrorsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: slipcatcherrors
  smsResponderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: smsResponderFunction
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Policies:
      - Statement:
        - Sid: snsAccess
          Effect: Allow
          Action:
          - sns:*
          Resource: '*'
      - Statement:
        - Sid: s3Access
          Effect: Allow
          Action:
          - s3:*
          Resource: '*'
      Events:
        StandardBucketTrigger:
          Type: S3
          Properties:
            Bucket:
              Ref: SlipCatchBucket
            Events: s3:ObjectCreated:*
    Metadata:
      SamResourceId: smsResponderFunction
  errorCheckerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: errorCheckerFunction
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Policies:
      - Statement:
        - Sid: snsAccess
          Effect: Allow
          Action:
          - sns:*
          Resource: '*'
      - Statement:
        - Sid: s3Access
          Effect: Allow
          Action:
          - s3:*
          Resource: '*'
    Metadata:
      SamResourceId: errorCheckerFunction
  imageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: imageFunction
      Handler: app.lambdaHandler
      Runtime: python3.7
      Policies:
      - Statement:
        - Sid: s3Access
          Effect: Allow
          Action:
          - s3:*
          - s3-object-lambda:*
          Resource: '*'
      - Statement:
        - Sid: rekognitionAccess
          Effect: Allow
          Action:
          - rekognition:*
          Resource: '*'
      Environment:
        Variables:
          APIkey:
            Ref: APIkey
    Metadata:
      SamResourceId: imageFunction
  ErrorEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run error event lambda every hour
      Name: ErrorEventRule
      ScheduleExpression: rate(1 hour)
      State: DISABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - errorCheckerFunction
          - Arn
        Id: errorCheckerTarget
  PermissionForEventsToInvokeErrorLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: errorCheckerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ErrorEventRule
        - Arn
  ImageEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run image event lambda every minute
      Name: ImageEventRule
      ScheduleExpression: rate(1 minute)
      State: DISABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - imageFunction
          - Arn
        Id: imageFunctionTarget
  PermissionForEventsToInvokeImageLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: imageFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ImageEventRule
        - Arn
