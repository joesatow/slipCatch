AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  This application scans specified Twitter users for sports betting tickets.  If it meets my criteria, it sends me an SMS.

Metadata:
  AWS::ServerlessRepo::Application:
    Name: 'Sports Betting Ticket Scanner'
    Description: This application scans specified Twitter users for sports betting tickets.  If it meets my criteria, it sends me an SMS.
    Author: Joe Satow

Parameters:
  APIkey:
    Type: String
    Default: 'APIkey'
    Description: (Required) Twitter API bearer token
    AllowedPattern: ^[A-Za-z0-9%]+$
    ConstraintDescription: 'Required parameter.'

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

Resources:
  SlipCatchBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: slipcatch
  SlipCatchPhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: slipcatchphotos
  SlipCatchErrorsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: slipcatcherrors
  smsResponderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: sendSMS/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Policies:
      - Statement:
        - Sid: snsAccess
          Effect: Allow
          Action:
          - sns:*
          Resource: '*'
      - Statement:
        - Sid: s3Access
          Effect: Allow
          Action:
          - s3:*
          Resource: '*'
      Events:
        FileUpload:
          Type: S3
          Properties:
              Bucket: !Ref SlipCatchBucket
              Events: s3:ObjectCreated:*
        FileUpload:
          Type: S3
          Properties:
              Bucket: !Ref SlipCatchErrorsBucket
              Events: s3:ObjectCreated:*
  imageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: imageFunction/
      Handler: app.lambdaHandler
      Runtime: python3.7
      Policies:
      - Statement:
        - Sid: s3Access
          Effect: Allow
          Action:
          - s3:*
          - s3-object-lambda:*
          Resource: '*'
      - Statement:
        - Sid: rekognitionAccess
          Effect: Allow
          Action:
          - rekognition:*
          Resource: '*'
      Environment:
        Variables:
          APIkey: !Ref APIkey

Outputs:
  smsResponderFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt smsResponderFunction.Arn
  smsResponderFunctionIamRole:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt smsResponderFunctionRole.Arn
